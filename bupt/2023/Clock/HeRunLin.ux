<template>
  <div class="wrapper">
    <canvas class="clock-canvas" id="clock-canvas"> </canvas>
  </div>
</template>

<script>

export default {
  private: {
    ctx: null,
    clockRadius: 200,
    centerRadius: 10,
    hourPointerLength: 80,
    hourPointerWidth: 7,
    minutePointerLength: 120,
    minutePointerWidth: 5,
    secondPointerLength: 150,
    secondPointerWidth: 2,
    centerFill: 'rgba(0, 0, 0, 1)',
    scaleLineFill: 'rgba(0, 0, 0, 1)',
    // 刻度
    scales: [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2],
    timer: null
  },

  onInit() {
    this.$page.setTitleBar({ text: 'A Simple Clock Demo' })
  },

  onShow() {
    this.drawClock()
  },

  onDestroy() {
    if (timer != null) {
      clearInterval(timer)
    }
  },

  drawClock() {
    //获取clock-canvas组件
    const canvas = this.$element('clock-canvas')
    //获取canvas绘图上下文
    this.ctx = canvas.getContext('2d')
    this.timer = setInterval(() => this.drawClockInternal(), 1000)
  },

  drawClockInternal() {
    this.ctx.save()
    this.clearClock()
    this.drawClockCenter()
    this.drawScalesAndLines()
    this.drawPointers()
    this.ctx.restore()
  },

  clearClock() {
    this.ctx.clearRect(0, 0, this.clockRadius << 1, this.clockRadius << 1);
  },

  drawPointers() {
    const now = new Date()
    const hour = now.getHours() % 12;
    const minute = now.getMinutes()
    const second = now.getSeconds()
    this.drawHourPointer(hour, minute)
    this.drawMinutePointer(minute)
    this.drawSecondPointer(second)
  },

  drawHourPointer(hour, minute) {
    this.ctx.save()
    this.ctx.beginPath()
    const h = Math.PI * 2 / 12 * hour
    const m = Math.PI * 2 / 12 / 60 * minute
    this.ctx.rotate(h + m)
    this.ctx.lineWidth = this.hourPointerWidth
    this.ctx.lineCap = "round"
    this.ctx.moveTo(0, 20)
    this.ctx.lineTo(0, -this.hourPointerLength)
    this.ctx.stroke()
    this.ctx.closePath()
    this.ctx.restore()
  },

  drawMinutePointer(minute) {
    this.ctx.save()
    this.ctx.beginPath();
    const rad = Math.PI * 2 / 60 * minute;
    this.ctx.rotate(rad);
    this.ctx.lineWidth = this.minutePointerWidth;
    this.ctx.lineCap = "round";
    this.ctx.moveTo(0, 20);
    this.ctx.lineTo(0, -this.minutePointerLength)
    this.ctx.stroke()
    this.ctx.closePath()
    this.ctx.restore()
  },

  drawSecondPointer(second) {
    this.ctx.save()
    this.ctx.beginPath()
    const rad = Math.PI * 2 / 60 * second
    this.ctx.rotate(rad)
    this.ctx.lineWidth = this.secondPointerWidth
    this.ctx.moveTo(0, 20)
    this.ctx.lineTo(0, -this.secondPointerLength)
    this.ctx.stroke()
    this.ctx.closePath()
    this.ctx.restore()
  },

  drawScalesAndLines() {
    this.ctx.translate(
      this.clockRadius,
      this.clockRadius
    )
    const modifiedRadius = this.clockRadius - 18;
    const scaleLineRadius = modifiedRadius - 25;
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = "middle";
    this.ctx.font = "20px Times New Roman Border";
    for (let i = 0; i < this.scales.length; i++) {
      const rad = Math.PI * 2 / 12 * i;
      const x = Math.cos(rad) * modifiedRadius;
      const y = Math.sin(rad) * modifiedRadius;
      this.ctx.fillText(this.scales[i], x, y)
    }

    // 画刻度帧
    for (let i = 0; i < 60; i++) {
      const rad = Math.PI * 2 / 60 * i;
      const x = Math.cos(rad) * scaleLineRadius;
      const y = Math.sin(rad) * scaleLineRadius;

      this.ctx.beginPath();
      this.ctx.arc(x, y, 2, 0, Math.PI * 2)
      this.ctx.fillStyle = this.scaleLineFill
      this.ctx.closePath();
      this.ctx.fill();
    }
  },

  drawClockCenter() {
    this.ctx.beginPath()
    this.ctx.moveTo(this.clockRadius, this.clockRadius)
    this.ctx.arc(
      this.clockRadius,
      this.clockRadius,
      this.centerRadius,
      0, Math.PI * 2, true
    )
    this.ctx.fillStyle = this.centerFill
    this.ctx.fill()
  },
}
</script>

<style>
* {
  margin: 0;
  padding: 0;
}

.wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  background: linear-gradient(45deg, #c7f1f0, #94e9eb);
}

.clock-canvas {
  width: 400px;
  height: 400px;
  border-radius: 50%;
  background-color: rgba(0, 255, 34, 0.3);
}
</style>
