<template>
  <!-- template里只能有一个根节点 -->
  <div class="wrapper">
    <!-- 点击跳转详情页 -->
    <canvas id="clock"></canvas>
  </div>
</template>

<script>
import router from '@system.router'

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖

  onInit() {
    // --------------------------------- Optimize SEO Start
    // 当 titlebar 的文案与搜索的标题不一致时，请先设置 titlebar
    // 备注：this.$page.setMeta 需要引擎 1090 版本及以上才支持，因此这段做注释处理；
    this.$page.setTitleBar({ text: '时钟' })
    setInterval(this.drawClock, 1000);
    // --------------------------------- Optimize SEO End
  },

  drawClock() {
    const canvas = document.getElementById('clock');
    const context = canvas.getContext('2d');
    const radius = canvas.width / 2;

    // 清除画布
    context.clearRect(0, 0, canvas.width, canvas.height);

    // 绘制时钟外框
    context.beginPath();
    context.arc(radius, radius, radius - 10, 0, 2 * Math.PI);
    context.lineWidth = 1;
    context.strokeStyle = 'black';
    context.stroke();
    context.closePath();

    // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();
    for (let i = 0; i < 12; i++) {
        const angle = i * (2 * Math.PI / 12) - Math.PI / 2;
        const x1 = radius + (radius - 10) * Math.cos(angle);
        const y1 = radius + (radius - 10) * Math.sin(angle);
        const x2 = radius + (radius - 50) * Math.cos(angle);
        const y2 = radius + (radius - 50) * Math.sin(angle);
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineWidth = 4;
        context.strokeStyle = 'black';
        context.stroke();
        context.closePath();
    }
    // 绘制时针
    const hourAngle = (hours % 12 + minutes / 60) * (2 * Math.PI / 12) - Math.PI / 2;
    const hourHandLength = radius * 0.5;
    const hourX = radius + hourHandLength * Math.cos(hourAngle);
    const hourY = radius + hourHandLength * Math.sin(hourAngle);
    context.beginPath();
    context.moveTo(radius, radius);
    context.lineTo(hourX, hourY);
    context.lineWidth = 8;
    context.strokeStyle = 'black';
    context.stroke();
    context.closePath();

    // 绘制分针
    const minuteAngle = (minutes + seconds / 60) * (2 * Math.PI / 60) - Math.PI / 2;
    const minuteHandLength = radius * 0.7;
    const minuteX = radius + minuteHandLength * Math.cos(minuteAngle);
    const minuteY = radius + minuteHandLength * Math.sin(minuteAngle);
    context.beginPath();
    context.moveTo(radius, radius);
    context.lineTo(minuteX, minuteY);
    context.lineWidth = 6;
    context.strokeStyle = 'black';
    context.stroke();
    context.closePath();

    // 绘制秒针
    const secondAngle = (seconds + now.getMilliseconds() / 1000) * (2 * Math.PI / 60) - Math.PI / 2;
    const secondHandLength = radius * 0.9;
    const secondX = radius + secondHandLength * Math.cos(secondAngle);
    const secondY = radius + secondHandLength * Math.sin(secondAngle);
    context.beginPath();
    context.moveTo(radius, radius);
    context.lineTo(secondX, secondY);
    context.lineWidth = 2;
    context.strokeStyle = 'red';
    context.stroke();
    context.closePath();

    // 绘制中心圆点
    context.beginPath();
    context.arc(radius, radius, 5, 0, 2 * Math.PI);
    context.fillStyle = 'black';
    context.fill();
    context.closePath();
  }


    
}
</script>

<style lang="less">
@import './../../assets/styles/style.less';

.wrapper {
  .flex-box-mixins(column, center, center);
  .title {
    font-size: 8 * @size-factor;
    text-align: center;
    color: @black;
  }
}
#clock{
  position: fixed;
  top:339px;
  left: 175px;
  width: 400px;
  height:400px;
}
</style>
