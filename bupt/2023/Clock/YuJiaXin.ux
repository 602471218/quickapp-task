<template>
  <!-- template里只能有一个根节点 -->
  <div class="wrapper">
   <div class="base1">
      <div class="move-to-center line"></div>
      <div class="move-to-center line line2"></div>
      <div class="move-to-center line line3"></div>
      <div class="move-to-center line line4"></div>
      <div class="move-to-center line line5"></div>
      <div class="move-to-center line line6"></div>
      <!--base2用来遮挡刻度线-->
      <div class="move-to-center base2"></div>
      <!-- 钟表指针 -->
      <div class="ptr m-ptr" style="transform: rotate({{mPtr}}deg);"></div>
      <div class="ptr h-ptr" style="transform: rotate({{hPtr}}deg)"></div>
      <div class="ptr s-ptr" style="transform: rotate({{sPtr}}deg)"></div>
      <!-- 中心点 -->
      <div class="move-to-center center"></div>
    </div>
    <div class="time-label"><text >当前时间:{{h}}:{{m}}:{{s}}</text></div>
	</div>
</template>

<script>
import router from '@system.router'

export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
     	h: 0,
        m: 0,
        s: 0,
        sPtr: -180,
        mPtr: -180,
        hPtr: -180
  },

  onInit() {
    this.$page.setTitleBar({ text: '时钟' })
    //获取当前的时间
	    let d = new Date()
      let h = d.getHours()
      let m = d.getMinutes()
      let s = d.getSeconds()
      this.h = h
      this.m = m
      this.s = s
      //一秒旋转6°
      this.sPtr += s * 6
      //一分钟旋转6°
      this.mPtr += m * 6 + s * 0.1
      //一小时旋转30°
      this.hPtr += h * 30 + m * 0.5 + s / 120
      //每一秒更新一次
      setInterval(() => {
        this.updateTime()
        this.updatePtr()
      }, 1000)
  },
  //更新时间（秒数+1）
   updateTime() {
     console.log("运行update time")
        this.s++
        if (this.s === 60) {
          this.m++
          this.s = 0
        }
        if (this.m === 60) {
          this.h++
          this.m = 0
        }
        if (this.h === 24) {
          this.h = 0
        }
      },
  //更新指针的角度
    updatePtr() {
      console.log("运行update ptr")
        this.sPtr += 6
        if (this.sPtr > 360) this.sPtr -= 360
        this.mPtr += 0.1
        if (this.mPtr > 360) this.mPtr -= 360
        this.hPtr += 1 / 120
        if (this.hPtr > 360) this.hPtr -= 360
      }


}
</script>

<style lang="less">
@import './../../assets/styles/style.less';

.wrapper {
  .flex-box-mixins(column, center, center);
}

div{
  box-sizing: border-box;
}

.container{
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.base1{
  background-color: #ddd;
  border: 10px solid black;
  border-radius: 50%;
  width: 300px;
  height: 300px;
  position: relative;
}

.move-to-center{
  position: absolute;
  top: 50%;
  left: 50%;
}

.center{
  --cw: 20px;
  --offset:-10px;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #ed6e46;
  margin-left: -10px;
  margin-top: -10px;
}

.base2{
  --shade-w: 260px;
  --offset:-130px;
  width: 260px;
  height: 260px;
  border-radius: 50%;
  background-color: #ddd;
  margin-left: -130px;
  margin-top: -130px;
}

.line{
  width: 5px;
  height: 280px;
  background-color: gray;
  margin-left: -2.5px;
  margin-top: -140px;
}

.line2{
  transform: rotate(30deg);
}

.line3{
  transform: rotate(60deg);
}

.line4{
  transform: rotate(90deg);
}

.line5{
  transform: rotate(120deg);
}

.line6{
  transform: rotate(150deg);
}

.ptr{
  position: absolute;
  top: 50%;
  left: 50%;
  transform-origin: top;
}

.s-ptr{
  background-color: red;
  width: 2px;
  height: 110px;
  margin-left: -1px;
  //设定旋转中心
  transform-origin:0 0;

}

.m-ptr{
  background-color: #000000;
  --w: 8px;
  width: 6px;
  height: 90px;
  border-radius: 4px;
  margin-left:-4px;
    transform-origin:0 0;
}

.h-ptr{
  background-color: #000000;
  --w: 8px;
  width: 8px;
  height: 70px;
  border-radius:4px;
  margin-left: -4px;
    transform-origin:0 0;
}

.time-label{
  margin-top: 32px;
  height: 100px;
  width: 250px;
  /* background-color: pink; */
  color:#000000;

}

</style>
